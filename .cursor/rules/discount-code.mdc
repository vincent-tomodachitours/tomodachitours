---
description: 
globs: 
alwaysApply: false
---
# Discount Code & Booking Cancellation Implementation Plan
## Tomodachi Tours - Pay.jp Integration

## **⚠️ CRITICAL ISSUE DISCOVERED**

During codebase review, I found a **critical bug** in the current system:

**Current Issue in `DatePicker.jsx` (lines 67 & 96):**
- Fetches data from `A2:I` but should be `A2:J` (missing timestamp column)
- Uses `b[8]` for participant count, but column I is empty!
- Should calculate participants as `b[2] + b[3]` (adults + children)

**This bug means tour availability checking is currently broken!**

### **Current System Overview**

Your system has:
- **Frontend**: React app with checkout flow in `src/Components/Checkout.jsx`
- **Backend**: Firebase Functions handling Pay.jp payments, Google Sheets booking storage
- **Payment**: Pay.jp integration with charge creation and 3D Secure support
- **Storage**: Google Sheets for booking data, email notifications via Google Apps Script

**Current Google Sheets Structure:**
```
Column A: date
Column B: time  
Column C: adults
Column D: children
Column E: infants
Column F: name
Column G: phone
Column H: email
Column I: "" (empty - reserved)
Column J: timestamp
```

## **Phase 0: Fix Critical Bug (MUST DO FIRST)**

### **0.1 Fix DatePicker.jsx**

```jsx
// Fix fetchBookings range in DatePicker.jsx (line 67)
const response = await fetch('https://us-central1-tomodachitours-f4612.cloudfunctions.net/getBookings', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
        range: `${sheetId}!A2:J` // Changed from A2:I to A2:J
    })
});

// Fix participant calculation (line 96)
Object.values(bookings).forEach((b) => {
    if (b[0] && b[1]) {
        const formattedDate = b[0].split("T")[0];
        const timeSlot = b[1];

        if (!participantsByDate[formattedDate]) {
            participantsByDate[formattedDate] = {};
        }
        
        availableTimes.forEach((t) => {
            if (!participantsByDate[formattedDate][t]) {
                participantsByDate[formattedDate][t] = 0;
            }
        });

        // FIX: Calculate total participants correctly
        const totalParticipants = parseInt(b[2] || 0) + parseInt(b[3] || 0); // adults + children
        participantsByDate[formattedDate][timeSlot] += totalParticipants;
    }
});
```

## **Phase 1: Discount Code System**

### **1.1 Backend Implementation (Firebase Functions)**

**Add new Firebase function for discount code validation (following existing patterns):**

```javascript
// Add to functions/index.js - following same structure as other functions

exports.validateDiscountCode = functions.https.onRequest((req, res) => {
    cors(req, res, async () => {
        console.log("===== Discount Code Validation Request =====");
        console.log("Method:", req.method);
        console.log("Body:", req.body);

        if (req.method === "OPTIONS") {
            console.log("OPTIONS preflight request");
            return res.status(204).send('');
        }

        if (req.method !== "POST") {
            console.error("Invalid method:", req.method);
            return res.status(405).send({ error: "Method not allowed" });
        }

        const { code, tourPrice, adults, children } = req.body;

        if (!code || !tourPrice || adults === undefined || children === undefined) {
            console.error("Missing required fields");
            return res.status(400).send({ success: false, message: "Missing required fields" });
        }

        try {
            // Define discount codes (could be moved to Firestore for dynamic management)
            const discountCodes = {
                "WELCOME10": { type: "percentage", value: 10, active: true },
                "SUMMER20": { type: "percentage", value: 20, active: true },
                "FRIEND50": { type: "fixed", value: 500, active: true },
                "VIP25": { type: "percentage", value: 25, active: true }
            };

            const discount = discountCodes[code.toUpperCase()];
            
            if (!discount || !discount.active) {
                console.log("Invalid discount code:", code);
                return res.status(400).json({ 
                    success: false, 
                    message: "Invalid or expired discount code" 
                });
            }

            const originalAmount = (adults + children) * tourPrice;
            let discountAmount = 0;
            
            if (discount.type === "percentage") {
                discountAmount = Math.round(originalAmount * (discount.value / 100));
            } else if (discount.type === "fixed") {
                discountAmount = Math.min(discount.value, originalAmount);
            }

            const finalAmount = originalAmount - discountAmount;

            console.log("✅ Discount validation successful:", {
                code: code.toUpperCase(),
                originalAmount,
                discountAmount,
                finalAmount
            });

            return res.status(200).json({
                success: true,
                discount: {
                    code: code.toUpperCase(),
                    type: discount.type,
                    value: discount.value,
                    discountAmount,
                    originalAmount,
                    finalAmount
                }
            });

        } catch (error) {
            console.error("❌ Discount validation failed");
            console.error("Message:", error.message);
            console.error("Stack:", error.stack);
            return res.status(500).json({ success: false, error: "Internal server error" });
        }
    });
});
```

**Update the createCharge function to handle discounted amounts:**

```javascript
// Update existing createCharge function - add discount handling
exports.createCharge = functions.https.onRequest((req, res) => {
    cors(req, res, async () => {
        console.log("===== Incoming Request =====");
        console.log("Method:", req.method);
        console.log("Headers:", req.headers);
        console.log("Body:", req.body);

        if (req.method === "OPTIONS") {
            console.log("OPTIONS preflight request");
            return res.status(204).send('');
        }

        if (req.method !== "POST") {
            console.error("Invalid method:", req.method);
            return res.status(405).send({ error: "Method not allowed" });
        }

        const token = req.body.token;
        const amount = req.body.amount;
        const discountCode = req.body.discountCode; // Add this
        const originalAmount = req.body.originalAmount; // Add this

        console.log("Received token:", token);
        console.log("Discount info:", { discountCode, originalAmount, amount });

        if (!token) {
            console.error("Missing token");
            return res.status(400).send({ success: false, message: "Missing token" });
        }

        try {
            console.log("Attempting charge with:", {
                amount,
                currency: "jpy",
                card: token,
                description: discountCode ? 
                    `Tour payment (${discountCode} applied - Original: ¥${originalAmount})` : 
                    "Tour payment"
            });
            
            const charge = await payjp.charges.create({
                amount,
                currency: "jpy",
                card: token,
                description: discountCode ? 
                    `Tour payment (${discountCode} applied - Original: ¥${originalAmount})` : 
                    "Tour payment",
                metadata: {
                    discount_code: discountCode || "",
                    original_amount: originalAmount || amount
                }
            });
            
            console.log("✅ Charge successful:", charge);
            return res.status(200).send({ success: true, charge });
        } catch (error) {
            console.error("❌ Charge failed");
            console.error("Message:", error.message);
            console.error("Stack:", error.stack);
            return res.status(500).send({ success: false, error: error.message });
        }
    });
});
```

### **1.2 Frontend Implementation**

**Update Checkout.jsx to handle discount codes (matching current styling):**

```jsx
// Add to existing state in Checkout component
const [discountCode, setDiscountCode] = useState('');
const [appliedDiscount, setAppliedDiscount] = useState(null);
const [discountLoading, setDiscountLoading] = useState(false);
const [discountError, setDiscountError] = useState('');

// Add discount application function
const handleApplyDiscount = async () => {
    if (!discountCode.trim()) return;
    
    setDiscountLoading(true);
    setDiscountError('');
    
    try {
        const response = await fetch("https://us-central1-tomodachitours-f4612.cloudfunctions.net/validateDiscountCode", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                code: discountCode,
                tourPrice,
                adults: adult,
                children: child
            }),
        });

        const result = await response.json();
        
        if (result.success) {
            setAppliedDiscount(result.discount);
            setDiscountError('');
        } else {
            setDiscountError(result.message);
            setAppliedDiscount(null);
        }
    } catch (error) {
        setDiscountError('Failed to validate discount code');
        setAppliedDiscount(null);
    } finally {
        setDiscountLoading(false);
    }
};

// Update the discount code section in the render (replace existing discount section)
// Using existing styling classes to match current design
<div>
    <label className="font-ubuntu text-md" htmlFor="discount">Discount code</label>
    <div className='flex gap-2'>
        <input 
            className='w-full h-10 rounded-md border border-gray-300 px-2 font-ubuntu' 
            type="text" 
            id='discount' 
            name='discount'
            value={discountCode}
            onChange={(e) => setDiscountCode(e.target.value)}
            disabled={appliedDiscount !== null}
        />
        <button 
            className={`p-2 rounded-md font-roboto font-bold text-white ${
                discountLoading ? 'bg-gray-400' : 
                appliedDiscount ? 'bg-green-600' : 'bg-blue-600'
            }`}
            onClick={appliedDiscount ? () => {
                setAppliedDiscount(null);
                setDiscountCode('');
                setDiscountError('');
            } : handleApplyDiscount}
            disabled={discountLoading}
        >
            {discountLoading ? 'Checking...' : 
             appliedDiscount ? 'Remove' : 'Apply'}
        </button>
    </div>
    {discountError && (
        <p className="text-red-500 text-sm mt-1 font-ubuntu">{discountError}</p>
    )}
    {appliedDiscount && (
        <p className="text-green-500 text-sm mt-1 font-ubuntu">
            Discount applied: -{appliedDiscount.type === 'percentage' ? 
                `${appliedDiscount.value}%` : 
                `¥${appliedDiscount.discountAmount}`}
        </p>
    )}
</div>

// Update the order total calculation and display
const finalPrice = appliedDiscount ? appliedDiscount.finalAmount : (adult + child) * tourPrice;

// Update the Order Total display section (maintaining existing styling)
<div className='flex justify-between'>
    <span className='font-bold text-2xl'>Order Total</span>
    <div className="text-right">
        {appliedDiscount && (
            <div className="text-sm text-gray-500 line-through font-roboto">
                ¥{appliedDiscount.originalAmount.toLocaleString('en-US')}
            </div>
        )}
        <span className='font-medium text-2xl'>¥{finalPrice.toLocaleString('en-US')}</span>
    </div>
</div>

// Update CardForm props to pass discount information
<CardForm 
    ref={childRef} 
    totalPrice={finalPrice}
    originalPrice={(adult + child) * tourPrice}
    appliedDiscount={appliedDiscount}
    formRef={formRef} 
    tourName={tourName} 
    sheetId={sheetId} 
    setPaymentProcessing={setPaymentProcessing} 
/>
```

**Update CardForm.jsx to pass discount information:**

```jsx
// Update the CardForm forwardRef signature
const CardForm = forwardRef(({ totalPrice, originalPrice, appliedDiscount, formRef, tourName, sheetId, setPaymentProcessing }, ref) => {

// Update the charge creation in handleGetToken
const response = await fetch("https://us-central1-tomodachitours-f4612.cloudfunctions.net/createCharge", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
        token: token.id,
        amount: totalPrice, // This is the discounted amount
        discountCode: appliedDiscount?.code || null,
        originalAmount: originalPrice || totalPrice
    }),
});
```

## **Phase 2: Booking Cancellation System**

### **2.1 Backend Implementation (Following existing patterns)**

**Add booking cancellation Firebase function:**

```javascript
exports.cancelBooking = functions.https.onRequest((req, res) => {
    cors(req, res, async () => {
        console.log("===== Booking Cancellation Request =====");
        console.log("Method:", req.method);
        console.log("Body:", req.body);

        if (req.method === "OPTIONS") {
            console.log("OPTIONS preflight request");
            return res.status(204).send('');
        }

        if (req.method !== "POST") {
            console.error("Invalid method:", req.method);
            return res.status(405).send({ error: "Method not allowed" });
        }

        const { bookingId, chargeId, email } = req.body;

        if (!chargeId || !email) {
            console.error("Missing required fields for cancellation");
            return res.status(400).send({ success: false, message: "Missing required fields" });
        }

        try {
            // 1. Verify booking exists and get details
            const spreadsheetId = "1sGrijFYalE47yFiV4JdyHHiY9VmrjVMdbI5RTwog5RM";
            
            const auth = new google.auth.GoogleAuth({
                credentials: serviceAccount,
                scopes: ['https://www.googleapis.com/auth/spreadsheets'],
            });

            const client = await auth.getClient();
            const sheets = google.sheets({ version: 'v4', auth: client });

            // Get booking details
            const getResponse = await sheets.spreadsheets.values.get({
                spreadsheetId,
                range: `A2:M`, // Extended to include new columns
            });

            const bookings = getResponse.data.values || [];
            const bookingIndex = bookings.findIndex(booking => 
                booking[7] === email && booking[11] === chargeId // email (H) and charge_id (L) match
            );

            if (bookingIndex === -1) {
                console.error("Booking not found for cancellation");
                return res.status(404).json({ 
                    success: false, 
                    message: "Booking not found" 
                });
            }

            const booking = bookings[bookingIndex];
            const bookingDate = new Date(booking[0]);
            const now = new Date();
            const timeDifference = bookingDate.getTime() - now.getTime();
            const hoursDifference = timeDifference / (1000 * 3600);

            console.log("Booking found:", {
                email,
                date: booking[0],
                hoursDifference: hoursDifference
            });

            // Check 24-hour cancellation policy
            if (hoursDifference < 24) {
                console.error("Cancellation attempted within 24 hours");
                return res.status(400).json({
                    success: false,
                    message: "Cancellation must be made at least 24 hours before the tour date"
                });
            }

            // 2. Process refund through Pay.jp
            console.log("Processing refund for charge:", chargeId);
            const refund = await payjp.refunds.create({
                charge: chargeId,
                reason: "requested_by_customer"
            });

            if (!refund || refund.object !== 'refund') {
                console.error("Failed to create refund");
                return res.status(500).json({
                    success: false,
                    message: "Failed to process refund"
                });
            }

            console.log("✅ Refund successful:", refund);

            // 3. Update booking status in Google Sheets
            const rowIndex = bookingIndex + 2; // +2 because sheets are 1-indexed and we start from row 2
            await sheets.spreadsheets.values.update({
                spreadsheetId,
                range: `K${rowIndex}`, // Status column
                valueInputOption: "USER_ENTERED",
                resource: {
                    values: [["CANCELLED"]]
                }
            });

            console.log("✅ Booking status updated to CANCELLED");

            // 4. Send cancellation confirmation email
            const emailNotification = await fetch('https://script.google.com/macros/s/AKfycbx7ZkjQRaqafa2BdzRxCYBvX7rVwBYE12Zr6z4YQWi7y_RvInXqa4MCkm4MzWOdHNm9/exec', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    secret: 'ifyoureadthisyouregay',
                    type: 'cancellation',
                    name: booking[5], // F: name
                    email: booking[7], // H: email
                    tourname: booking[8] || 'Tour', // I: tour name (will be added)
                    date: booking[0], // A: date
                    time: booking[1], // B: time
                    refundAmount: refund.amount
                })
            });

            const emailResult = await emailNotification.text();
            console.log("Email notification sent:", emailResult);

            return res.status(200).json({
                success: true,
                message: "Booking cancelled successfully",
                refund: {
                    amount: refund.amount,
                    id: refund.id
                }
            });

        } catch (error) {
            console.error("❌ Cancellation failed");
            console.error("Message:", error.message);
            console.error("Stack:", error.stack);
            return res.status(500).json({ 
                success: false, 
                error: "Internal server error" 
            });
        }
    });
});

// Add function to lookup booking details for cancellation form
exports.getBookingDetails = functions.https.onRequest((req, res) => {
    cors(req, res, async () => {
        console.log("===== Get Booking Details Request =====");
        console.log("Method:", req.method);
        console.log("Body:", req.body);

        if (req.method === "OPTIONS") {
            console.log("OPTIONS preflight request");
            return res.status(204).send('');
        }

        if (req.method !== "POST") {
            console.error("Invalid method:", req.method);
            return res.status(405).send({ error: "Method not allowed" });
        }

        const { email } = req.body;

        if (!email) {
            console.error("Missing email for booking lookup");
            return res.status(400).send({ success: false, message: "Email is required" });
        }

        try {
            const spreadsheetId = "1sGrijFYalE47yFiV4JdyHHiY9VmrjVMdbI5RTwog5RM";
            
            const auth = new google.auth.GoogleAuth({
                credentials: serviceAccount,
                scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly'],
            });

            const client = await auth.getClient();
            const sheets = google.sheets({ version: 'v4', auth: client });

            const response = await sheets.spreadsheets.values.get({
                spreadsheetId,
                range: `A2:M`,
            });

            const bookings = response.data.values || [];
            const userBookings = bookings
                .filter(booking => booking[7] === email && booking[10] !== "CANCELLED") // Not cancelled
                .map((booking, index) => ({
                    id: index + 2, // Row number in sheet
                    date: booking[0],
                    time: booking[1],
                    adults: booking[2],
                    children: booking[3],
                    tourName: booking[8] || 'Tour',
                    chargeId: booking[11] || '', // L: charge_id
                    canCancel: new Date(booking[0]).getTime() - new Date().getTime() > 24 * 60 * 60 * 1000 // 24 hours
                }));

            console.log("✅ Found bookings for user:", userBookings.length);

            return res.status(200).json({
                success: true,
                bookings: userBookings
            });

        } catch (error) {
            console.error("❌ Get booking details failed");
            console.error("Message:", error.message);
            console.error("Stack:", error.stack);
            return res.status(500).json({ 
                success: false, 
                error: "Internal server error" 
            });
        }
    });
});
```

### **2.2 Frontend Implementation (Matching current styling)**

**Create BookingCancellation component:**

```jsx
// src/Components/BookingCancellation.jsx
import React, { useState } from 'react';
import Header from './Headers/Header1';
import Footer from './Footer';

const BookingCancellation = () => {
    const [email, setEmail] = useState('');
    const [bookings, setBookings] = useState([]);
    const [loading, setLoading] = useState(false);
    const [cancelling, setCancelling] = useState(false);
    const [message, setMessage] = useState('');

    const handleLookupBookings = async () => {
        if (!email.trim()) return;
        
        setLoading(true);
        setMessage('');
        
        try {
            const response = await fetch("https://us-central1-tomodachitours-f4612.cloudfunctions.net/getBookingDetails", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ email }),
            });

            const result = await response.json();
            
            if (result.success) {
                setBookings(result.bookings);
                if (result.bookings.length === 0) {
                    setMessage('No bookings found for this email address');
                }
            } else {
                setMessage('Failed to lookup bookings');
            }
        } catch (error) {
            setMessage('Failed to lookup bookings');
        } finally {
            setLoading(false);
        }
    };

    const handleCancelBooking = async (booking) => {
        if (!window.confirm(`Are you sure you want to cancel your booking for ${booking.tourName} on ${booking.date}?`)) {
            return;
        }

        setCancelling(true);
        
        try {
            const response = await fetch("https://us-central1-tomodachitours-f4612.cloudfunctions.net/cancelBooking", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    bookingId: booking.id,
                    chargeId: booking.chargeId,
                    email: email
                }),
            });

            const result = await response.json();
            
            if (result.success) {
                setMessage(`Booking cancelled successfully. Refund of ¥${result.refund.amount.toLocaleString('en-US')} will be processed.`);
                // Remove cancelled booking from list
                setBookings(prev => prev.filter(b => b.id !== booking.id));
            } else {
                setMessage(result.message || 'Failed to cancel booking');
            }
        } catch (error) {
            setMessage('Failed to cancel booking');
        } finally {
            setCancelling(false);
        }
    };

    return (
        <div className='w-full h-screen min-h-screen flex flex-col overflow-y-auto bg-stone-300'>
            <Header />
            <div className="w-4/5 md:w-3/4 mx-auto flex-1 mt-10">
                <h1 className="font-roboto text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold mb-12 text-gray-700">Cancel Your Booking</h1>
                
                <div className="mb-6 bg-white p-6 rounded-lg border border-gray-300">
                    <label className="block font-ubuntu text-lg font-medium mb-4 text-gray-700">
                        Email Address (used for booking)
                    </label>
                    <div className="flex gap-2">
                        <input
                            type="email"
                            value={email}
                            onChange={(e) => setEmail(e.target.value)}
                            className="flex-1 h-10 px-3 py-2 border border-gray-300 rounded-md font-ubuntu"
                            placeholder="Enter your email"
                        />
                        <button
                            onClick={handleLookupBookings}
                            disabled={loading}
                            className="px-4 py-2 bg-blue-600 text-white rounded-md font-roboto font-bold disabled:bg-gray-400"
                        >
                            {loading ? 'Looking up...' : 'Find Bookings'}
                        </button>
                    </div>
                </div>

                {message && (
                    <div className={`p-4 rounded-md mb-4 font-ubuntu ${
                        message.includes('successfully') ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
                    }`}>
                        {message}
                    </div>
                )}

                {bookings.length > 0 && (
                    <div>
                        <h2 className="font-roboto text-2xl font-bold mb-6 text-gray-700">Your Bookings</h2>
                        {bookings.map((booking) => (
                            <div key={booking.id} className="bg-white border border-gray-300 rounded-lg p-6 mb-4">
                                <h3 className="font-roboto text-xl font-bold text-blue-600 mb-2">{booking.tourName}</h3>
                                <p className="text-gray-700 font-ubuntu mb-2">
                                    <strong>Date:</strong> {new Date(booking.date).toLocaleDateString()} at {booking.time}
                                </p>
                                <p className="text-gray-700 font-ubuntu mb-4">
                                    <strong>Participants:</strong> {booking.adults} adults, {booking.children} children
                                </p>
                                <div className="mt-3">
                                    {booking.canCancel ? (
                                        <button
                                            onClick={() => handleCancelBooking(booking)}
                                            disabled={cancelling}
                                            className="px-4 py-2 bg-red-600 text-white rounded-md font-roboto font-bold disabled:bg-gray-400 hover:bg-red-700"
                                        >
                                            {cancelling ? 'Cancelling...' : 'Cancel Booking'}
                                        </button>
                                    ) : (
                                        <p className="text-red-600 font-ubuntu font-bold">
                                            Cannot cancel - less than 24 hours before tour
                                        </p>
                                    )}
                                </div>
                            </div>
                        ))}
                    </div>
                )}
            </div>
            <Footer />
        </div>
    );
};

export default BookingCancellation;
```

**Add route for booking cancellation:**

```jsx
// Add to src/App.js imports
import BookingCancellation from './Components/BookingCancellation';

// Add route to Routes section
<Route path="/cancel-booking" element={<BookingCancellation />} />
```

## **Phase 3: Data Structure Updates**

### **3.1 Update Google Sheets Structure**

**New Google Sheets Structure (after updates):**
```
Column A: date
Column B: time  
Column C: adults
Column D: children
Column E: infants
Column F: name
Column G: phone
Column H: email
Column I: tourname (NEW - currently empty, will be populated)
Column J: timestamp
Column K: status (NEW - CONFIRMED/CANCELLED)
Column L: charge_id (NEW - from Pay.jp)
Column M: discount_code (NEW - optional)
```

**Modify the createBookings function:**

```javascript
// Update createBookings to include new fields
const values = [
    [
        req.body.date,
        req.body.time,
        req.body.adults,
        req.body.children,
        req.body.infants,
        req.body.name,
        req.body.phone,
        req.body.email,
        req.body.tourname || "", // Tour name (I)
        new Date().toISOString(), // timestamp (J)
        "CONFIRMED", // Status (K)
        "", // Charge ID (L) - will be updated after payment
        req.body.discountcode || "", // Discount code (M)
    ],
];
```

### **3.2 Add function to update booking with charge ID**

```javascript
// Add new function to update booking with charge ID after successful payment
exports.updateBookingChargeId = functions.https.onRequest((req, res) => {
    cors(req, res, async () => {
        console.log("===== Update Booking Charge ID Request =====");
        console.log("Method:", req.method);
        console.log("Body:", req.body);

        if (req.method === "OPTIONS") {
            console.log("OPTIONS preflight request");
            return res.status(204).send('');
        }

        if (req.method !== "POST") {
            console.error("Invalid method:", req.method);
            return res.status(405).send({ error: "Method not allowed" });
        }

        const { email, chargeId, tourname } = req.body;

        if (!email || !chargeId || !tourname) {
            console.error("Missing required fields for charge ID update");
            return res.status(400).send({ success: false, message: "Missing required fields" });
        }

        try {
            const spreadsheetId = "1sGrijFYalE47yFiV4JdyHHiY9VmrjVMdbI5RTwog5RM";
            
            const auth = new google.auth.GoogleAuth({
                credentials: serviceAccount,
                scopes: ['https://www.googleapis.com/auth/spreadsheets'],
            });

            const client = await auth.getClient();
            const sheets = google.sheets({ version: 'v4', auth: client });

            // Find the most recent booking for this email and tour without charge ID
            const getResponse = await sheets.spreadsheets.values.get({
                spreadsheetId,
                range: `A2:M`,
            });

            const bookings = getResponse.data.values || [];
            const bookingIndex = bookings.findIndex(booking => 
                booking[7] === email && 
                booking[8] === tourname && 
                !booking[11] // No charge ID yet (column L)
            );

            if (bookingIndex !== -1) {
                const rowIndex = bookingIndex + 2;
                await sheets.spreadsheets.values.update({
                    spreadsheetId,
                    range: `L${rowIndex}`, // Charge ID column
                    valueInputOption: "USER_ENTERED",
                    resource: {
                        values: [[chargeId]]
                    }
                });

                console.log("✅ Charge ID updated successfully");
            } else {
                console.log("No matching booking found for charge ID update");
            }

            return res.status(200).json({ success: true });

        } catch (error) {
            console.error("❌ Update charge ID failed");
            console.error("Message:", error.message);
            console.error("Stack:", error.stack);
            return res.status(500).json({ success: false, error: "Internal server error" });
        }
    });
});
```

### **3.3 Update CardForm to link booking with charge ID**

```jsx
// In CardForm.jsx, update handleCreateBooking to include discount code
const response = await fetch("https://us-central1-tomodachitours-f4612.cloudfunctions.net/createBookings", {
    method: "POST",
    headers: {
        "Content-Type": "application/json",
    },
    body: JSON.stringify({
        ...bookingData,
        range: `${sheetId}!A2:M`, // Updated range
        tourname: tourName,
        tourprice: totalPrice,
        discountcode: appliedDiscount?.code || "" // Add discount code
    }),
});

// In handleGetToken, update booking with charge ID
const data = await response.json();
if (data.success) {
    // Update booking with charge ID before redirecting
    try {
        await fetch("https://us-central1-tomodachitours-f4612.cloudfunctions.net/updateBookingChargeId", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                email: formRef.current.email,
                chargeId: data.charge.id,
                tourname: tourName
            }),
        });
    } catch (error) {
        console.error("Failed to update booking with charge ID:", error);
        // Don't block the success flow
    }
    
    window.location.href = "/thankyou";
}
```

## **Phase 4: Testing Strategy**

### **4.1 Priority Testing (Discount Code & Cancellation Focus)**

**Discount Code Testing:**
1. **Percentage Discounts:**
   - Test WELCOME10 (10% off)
   - Test VIP25 (25% off)
   - Verify calculations are correct
   - Test edge case: 100% discount

2. **Fixed Amount Discounts:**
   - Test FRIEND50 (¥500 off)
   - Test when discount > total amount
   - Verify minimum amount handling

3. **Invalid Code Testing:**
   - Test non-existent codes
   - Test inactive codes
   - Test empty/null codes
   - Verify error messaging

4. **UI/UX Testing:**
   - Test apply/remove functionality
   - Test loading states
   - Test visual feedback (green success, red error)
   - Test disabled states

**Cancellation Testing:**
1. **24-Hour Rule Testing:**
   - Test cancellation 25+ hours before tour
   - Test cancellation 23 hours before tour
   - Test cancellation same day
   - Verify error messaging

2. **Refund Processing:**
   - Test successful Pay.jp refund
   - Test failed refund scenarios
   - Verify refund amounts match original charge
   - Test discount refund calculations

3. **Email Lookup Testing:**
   - Test with valid email (has bookings)
   - Test with valid email (no bookings)
   - Test with invalid email format
   - Test with non-existent email

4. **Booking Status Testing:**
   - Verify cancelled bookings don't appear
   - Test multiple bookings for same email
   - Test booking display information

### **4.2 Integration Testing**
1. **End-to-End Discount Flow:**
   - Book tour with discount code
   - Verify charge amount is discounted
   - Verify original amount stored in metadata
   - Cancel booking with discount and verify refund

2. **Complete Booking Lifecycle:**
   - Create booking → Apply discount → Pay → Receive confirmation → Cancel → Receive refund

### **4.3 Deployment Steps**
1. **CRITICAL**: Deploy the DatePicker.jsx bug fix immediately
2. Update Google Sheets to add new columns (K: Status, L: Charge ID, M: Discount Code)
3. Deploy Firebase Functions updates
4. Deploy frontend changes
5. Test with Pay.jp test environment
6. Update Google Apps Script for cancellation emails

## **Phase 5: UI/UX Enhancements (Matching Current Style)**

### **5.1 Add Cancellation Link to Footer (Matching existing style)**

```jsx
// Update Footer.jsx to include cancellation link with existing styling
<div className='flex flex-col gap-2 justify-center items-center font-ubuntu text-xs md:text-base text-green-700 underline'>
    <Link to="/cancellation-policy">Cancellation Policy</Link>
    <Link to="/cancel-booking">Cancel Booking</Link>
    <Link to="/commercial-disclosure">Commercial Disclosure</Link>
</div>
```

### **5.2 Add Cancellation Link to Thank You Page**

```jsx
// Add to Thankyou.jsx component with existing styling
<p className="mt-4 font-ubuntu">
    Need to cancel your booking? 
    <Link to="/cancel-booking" className="text-blue-600 underline ml-1 font-ubuntu">
        Cancel here
    </Link>
</p>
```

## **Implementation Checklist**

- [ ] **PHASE 0: Fix critical DatePicker bug (URGENT)**
- [ ] Phase 1: Backend discount validation function
- [ ] Phase 1: Frontend discount code UI updates
- [ ] Phase 1: Update createCharge for discount metadata
- [ ] Phase 2: Backend cancellation functions
- [ ] Phase 2: Frontend cancellation component
- [ ] Phase 3: Update Google Sheets structure
- [ ] Phase 3: Add charge ID linking function
- [ ] Phase 4: Comprehensive testing (discount & cancellation focus)
- [ ] Phase 5: UI/UX enhancements
- [ ] Deploy to production

---

**⚠️ PRIORITY**: The DatePicker bug fix in Phase 0 should be implemented immediately as it affects core booking functionality!
