"use strict";
const account_1 = require("./account");
const charge_1 = require("./charge");
const customer_1 = require("./customer");
const event_1 = require("./event");
const plan_1 = require("./plan");
const subscription_1 = require("./subscription");
const tenants_1 = require("./tenants");
const tenantTransfers_1 = require("./tenantTransfers");
const token_1 = require("./token");
const transfer_1 = require("./transfer");
const statement_1 = require("./statement");
const term_1 = require("./term");
const balance_1 = require("./balance");
const threeDSecureRequest_1 = require("./threeDSecureRequest");
const Payjp = function (apikey, options = {}) {
    if (!apikey) {
        throw new Error('Please set apikey.');
    }
    else if (apikey.indexOf('pk_') === 0) {
        throw new Error('You cannot use the public apikey in this SDK.');
    }
    const payjpConfig = {
        apikey,
        config: {
            apibase: options.apibase || 'https://api.pay.jp/v1',
            timeout: options.timeout || 0,
            maxRetry: options.maxRetry || 0,
            retryInitialDelay: options.retryInitialDelay || 2000,
            retryMaxDelay: options.retryMaxDelay || 32000,
        },
    };
    return {
        apikey,
        // todo not using spread operator for Node.js v6 support
        config: payjpConfig.config,
        charges: new charge_1.default(payjpConfig),
        customers: new customer_1.default(payjpConfig),
        plans: new plan_1.default(payjpConfig),
        subscriptions: new subscription_1.default(payjpConfig),
        tokens: new token_1.default(payjpConfig),
        transfers: new transfer_1.default(payjpConfig),
        events: new event_1.default(payjpConfig),
        accounts: new account_1.default(payjpConfig),
        tenants: new tenants_1.default(payjpConfig),
        'tenant_transfers': new tenantTransfers_1.default(payjpConfig),
        statements: new statement_1.default(payjpConfig),
        terms: new term_1.default(payjpConfig),
        balances: new balance_1.default(payjpConfig),
        three_d_secure_requests: new threeDSecureRequest_1.default(payjpConfig),
    };
};
module.exports = Payjp;
